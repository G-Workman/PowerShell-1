HASH TABLES
Work on Key-value pairs, rather than objects themselves
$hashy = @{}      <------- declare an empty hash table
$hashy = @{key="value" ; key2="value2"}     <---- declare a hash table with multiple values
> name = key        >value = value
$hashy.gettype()
> hashtable

$another = @{}
$another.IS_Anime = "yes"                    <------- use this one to edit already added keys/values
Key/name = IS.Anime        value = yes

$another["IS_Good"] = "depends"              <------- use this one to edit already added keys/values
key/name = IS.Anime        value = yes
key/name = IS_Good         value = depends

$another.Add("OPM","Saitama")                <------ use this one to add keys/values
key/name = IS.Anime        value = yes
key/name = IS_Good         value = depends
key/name = OPM             value = Saitama



ORDERED HASH TABLE
$ordered = [ordered]@{}      <------ in order to make an ordered hash table you have to declare [ordered] the first time you add something to the hash table
$ordered."McDonalds" = @("BigMac" , "1 Chiccy Nuggy" , "7 Happy Meals", "1 Filet-of-Fish")    <---- adds an array with the key of Mcdonalds
$ordered["Chik-fil-A"]="2 Spicy Chicken Sandwiches"    <------ adds the key Chik-fil-a with the value of "2 Spicy Chicken Sandwiches"
$ordered.Add("Taco Bell", "a bad time")     <-------- adds the key taco bell with the value of a bad time
$ordered.'Chik-fil-A'    <------- References the exact value for the key of chik-fil-a

$ordered["McDonalds","Taco Bell"]     <------- References multiple keys to grab the values for 

$ordered.Keys      <----- shows just the keys in a hash table
$ordered.Values    <----- shows just the values in a hash table






PIPING                           <----- Powershell is object oriented so it is slightly different from bash
get-service | get-member         <----- pipes the result from a list of services into their attributes, this is giving us more information than just get-service

get-member gives us a cmdlet's, and other object's, methods and properties
(get-service bfe).StartType      <------ a cmdlet in parentheses grabs all of the cmdlet and sets it as an object
(service).stop                   <------ stops a service

get-service sorts itself aplhabetically by default, but to change it to sort by the status of the services:
get-service | sort-object -Property status          <------ property status is known to sort with because of get-service | get-member
get-service | sort-object -Property status, name    <------ sorts on status first, then the name of the service
get-service | groupt-object -Property status        <------ counts how many there are of each status rather than listing them in order
1, 7, 10, 8, 2, 3 | sort                            <------ sorts numerically
"1", "7", "10", "8", "2", "3" | sort                <------ sorts by ASCII
"1", "7", "10", "8", "2", "3" | sort -property { [Int]$_ }      <------- puts the order of these strings in order by their numerical representation
1..10 | sort -property { get-random }




FILTERING
Where-object is the best cmdlet for filtering because is filters based on given terms
get-service | where-object { $_.Status -eq "Running }    <----- only grabs the services that are running

Get-Process svchost | select-object handles <------- grabs a portion of the output to filter out, in this case I'm grabbing the colum called handles
OR
(get-process svchost).handles

Get-Process | select-object -first 10    <------ grabs the first 10 objects of the output
Get-Process | select-object -last 10     <------ grabs the last 10 objects of the output
1,2,3,1,2,3,1,2,3,1,2,3 | sort | get-unique   <---- you must sort a list before trying to get the unique objects from it
get-childitem | measure-object length         <----- grabs the length of the cmdlet used, you can then set extra parameters (ie -average) to find the
other info:
Count    : 4327
Average  : 
Sum      : 
Maximum  : 
Minimum  : 
Property : length




WRITE-HOST VS WRITE-OUTPUT
Write-host- Prints a reult to the screen (YOU CAN NOT PIPE WITH WRITE HOST)
Write-Output- takes the command and puts it through the pipeline



FORMAT
Format-List   
Format-Table                                                       
Format-Wide                                                       




